{"_type":"export","__export_format":4,"__export_date":"2023-04-16T00:38:21.420Z","__export_source":"insomnia.desktop.app:v2023.1.0","resources":[{"_id":"req_48d9fd8416c549798b7c311a97131739","parentId":"fld_5ecc6d087dd243fe8cdebbc8e96560c8","modified":1681595595521,"created":1681419107909,"url":"localhost:3333/login","name":"login","description":"Este endpoint recebe no body dois parametros obrigatórios: email e senha. Estes dados passam por uma verificação no banco de dados para confirmar que de fato eles existem.\nCaso existam no banco de dados é emitida uma resposta com o status 200 e um json com o token de acesso é retornado, caso os dados não sejam verificados é reportado um erro com status 401.","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"email\":\"testeSenha@gmail.com\",\n\t\"senha\":\"12345678910\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681300997337.7812,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_5ecc6d087dd243fe8cdebbc8e96560c8","parentId":"wrk_8f5be0557ae9439a81b882cd65837542","modified":1681585349960,"created":1681584534669,"name":"Autenticação","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1681460262309.7422,"_type":"request_group"},{"_id":"wrk_8f5be0557ae9439a81b882cd65837542","parentId":null,"modified":1681300997338,"created":1681300997338,"name":"New Document","description":"","scope":"design","_type":"workspace"},{"_id":"req_11732f32d00543a7b2650e5ea44596a5","parentId":"fld_db7ee154de7a46efb7f4fe3e50d9c931","modified":1681604923808,"created":1681419175519,"url":"localhost:3333/psicologos","name":"listar psicólogos","description":"Lista todos os psicólogos cadastrados no banco de dados retornando o status 200.\ncaso não existam psicólogos cadastrados é retornada uma Array vazia e também retorna o status 200.\n","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681407405479.625,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_db7ee154de7a46efb7f4fe3e50d9c931","parentId":"wrk_8f5be0557ae9439a81b882cd65837542","modified":1681585363257,"created":1681584146551,"name":"Psicologos","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1681433718156.4727,"_type":"request_group"},{"_id":"req_fc7e7f844e584f4c8b00662241b46b93","parentId":"fld_db7ee154de7a46efb7f4fe3e50d9c931","modified":1681604943340,"created":1681571524688,"url":"localhost:3333/psicologos/1","name":"listar psicólogo especifico","description":"Retorna as informações do psicólogo cujo id foi passado como parâmetro da URL.\n\n- caso o id fornecido seja valido a API vai retornar o status 200.\n- Caso o id do psicólogo não seja encontrado, a API retornará o status 404 e um json com a mensagem \"id não encontrado\".\n\nPara fazer esta requisição é necessario o envio do token.\n\n- Caso o token fornecido seja invalido será retornado o status 401","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_cc80cfa2deb24aa9930508ea05c6a451"},{"id":"pair_f2f0728a61a6461d80b1bf4fdf2289d0","name":"Authorization","value":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIsIm5vbWUiOiJ0ZXN0YW5kbyBsaW1pdGHDp8OjbyIsImVtYWlsIjoidGVzdGVTZW5oYUBnbWFpbC5jb20iLCJpYXQiOjE2ODE1ODk0NDF9.rIUr42W36j4XWBix_ipmM_vhh_oOg40kq-QuA-UcOZw","description":""}],"authentication":{},"metaSortKey":-1681389670789.1875,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_48396589f33340f8a951f0aaa74f5245","parentId":"fld_db7ee154de7a46efb7f4fe3e50d9c931","modified":1681604953766,"created":1681339216302,"url":"localhost:3333/psicologos","name":"create psicólogos","description":"Cria o registro de um psicólogo, para criar este registro é preciso enviar um json com as seguintes informações no body:\n\n- nome\n- email\n- senha\n- apresentacao\n\ncaso alguma informação não seja passada é retornado o status 400.\nNo caso de todas as informações serem passadas de forma correta é retornado o status 201 e um json com todos os dados que foram cadastrados.","method":"POST","body":{"mimeType":"application/json","text":"\n\t{\n\t\t\"nome\":\"testeSenha2\",\n\t\t\"email\":\"testeSenha2@gmail.com\",\n\t\t\"senha\":\"12345678910\",\n\t\t\"apresentacao\":\"um bom psicologo teste senha\"\n\t}\n"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681385237116.5781,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_c066eff68d694e8f870ec7c335dd12ca","parentId":"fld_db7ee154de7a46efb7f4fe3e50d9c931","modified":1681604965621,"created":1681356071637,"url":"localhost:3333/psicologos/12","name":"update psicólogos","description":"Realiza a atualização do registro de um psicólogo. para realizar essa atualização é necessario o envio do token do psicologo logado e que o registro a ser atualizado deve ser o registro do psicólogo logado.\n\nNo body devem ser passados os seguintes dados:\n\n- nome\n- email\n- senha\n- apresentacao\n\nTodos estes campos devem ser preenchidos, caso contrário será retornado o status 400.\n\nNo caso do psicólogo tentar atualizar o registro de outro psicólogo será retornado o status 401 com um json com a mensagem 'o psicólogo só pode atualizar os proprios dados'.\n\nNo caso da requisição ser bem sucedida, retornará o status 200 com um json com os novos dados.\n\nPara fazer esta requisição é necessario o envio do token.\n\n- Caso o token fornecido seja invalido será retornado o status 401\n","method":"PUT","body":{"mimeType":"application/json","text":"\n\t{\n\t\t\"nome\":\"testando\",\n\t\t\"email\":\"testeSenha@gmail.com\",\n\t\t\"senha\":\"12345678910\",\n\t\t\"apresentacao\":\"um teste de limit\"\n\t}\n"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_41a3e51c41134e5a9d844b8462512b29"},{"id":"pair_994df8fa0b6d4185a4ed9c4e24f6b357","name":"Authorization","value":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIsIm5vbWUiOiJ0ZXN0YW5kbyBsaW1pdGHDp8OjbyIsImVtYWlsIjoidGVzdGVTZW5oYUBnbWFpbC5jb20iLCJpYXQiOjE2ODE1ODk0NDF9.rIUr42W36j4XWBix_ipmM_vhh_oOg40kq-QuA-UcOZw","description":""}],"authentication":{},"metaSortKey":-1681380803443.9688,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ca58b6d1660848e9b4a414b71b62992b","parentId":"fld_db7ee154de7a46efb7f4fe3e50d9c931","modified":1681604974987,"created":1681571290474,"url":"localhost:3333/psicologos/99","name":"delete psicólogos","description":"Deleta o registro do psicólogo com o id fornecido na requisição.\n\n- caso o id não seja encontrado a API retornará o status 404 e um json com a mensagem 'id não encontrado'.\n\n- Caso o id fornecido esteja correto, o registro é apagado do banco de dados e a API retornará o status 204.\n\nPara fazer esta requisição é necessario o envio do token.\n\n- Caso o token fornecido seja invalido será retornado o status 401","method":"DELETE","body":{},"parameters":[],"headers":[{"id":"pair_366964158dd24d7cae41665488564779","name":"Authorization","value":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIsIm5vbWUiOiJ0ZXN0ZVNlbmhhIiwiZW1haWwiOiJ0ZXN0ZVNlbmhhQGdtYWlsLmNvbSIsImlhdCI6MTY4MTU3MDg2OH0.X2Pbb1dyfdJE7ByiyzgfiX_WNPWtdontG2GOSVLbyOQ","description":""}],"authentication":{},"metaSortKey":-1681380803393.9688,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_e4dac06ee6bc482b91bb2d99db8ceeaa","parentId":"fld_323b4c8d015c483890ecc98a712e125c","modified":1681604298161,"created":1681345575885,"url":"localhost:3333/pacientes","name":"listar pacientes","description":"Lista todos os pacientes cadastrados no banco de dados retornando o status 200.\ncaso não existam registros de pacientes cadastrados é retornada uma Array vazia e também retorna o status 200.\n","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681442566243.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_323b4c8d015c483890ecc98a712e125c","parentId":"wrk_8f5be0557ae9439a81b882cd65837542","modified":1681585347311,"created":1681584135024,"name":"Pacientes","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1681407174003.2031,"_type":"request_group"},{"_id":"req_a8cd5cf21cdc4d43b1fc45e9dc9280c4","parentId":"fld_323b4c8d015c483890ecc98a712e125c","modified":1681604654898,"created":1681571478906,"url":"localhost:3333/pacientes/17","name":"listar paciente especifico","description":"Retorna as informações do paciente cujo id foi passado como parâmetro da URL.\n\n- caso o id fornecido seja valido a API vai retornar o status 200.\n- Caso o id do paciente não seja encontrado, a API retornará o status 404 e um json com a mensagem \"id não encontrado\".\n\nPara fazer esta requisição é necessario o envio do token.\n\n- Caso o token fornecido seja invalido será retornado o status 401","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_cc80cfa2deb24aa9930508ea05c6a451"},{"id":"pair_f2f0728a61a6461d80b1bf4fdf2289d0","name":"Authorization","value":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIsIm5vbWUiOiJ0ZXN0YW5kbyBsaW1pdGHDp8OjbyIsImVtYWlsIjoidGVzdGVTZW5oYUBnbWFpbC5jb20iLCJpYXQiOjE2ODE1ODk0NDF9.rIUr42W36j4XWBix_ipmM_vhh_oOg40kq-QuA-UcOZw","description":""}],"authentication":{},"metaSortKey":-1681442566193.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a0cd91d4b6a748bd94f49a538df9fcdf","parentId":"fld_323b4c8d015c483890ecc98a712e125c","modified":1681604457653,"created":1681346477259,"url":"localhost:3333/pacientes","name":"criar pacientes","description":"Cria o registro de um paciente, para criar este registro é preciso enviar um json com as seguintes informações no body:\n\n- nome\n- email\n- idade\n\ncaso alguma informação não seja passada é retornado o status 400.\nNo caso de todas as informações serem passadas de forma correta é retornado o status 201 e um json com todos os dados que foram cadastrados.","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"nome\":\"pac14701\",\n\t\"email\":\"pac14701@gmail.com\",\n\t\"idade\":\"09/07/1994\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681442566143.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_c0b96b2f6b0e40fe94a51363fd14fe15","parentId":"fld_323b4c8d015c483890ecc98a712e125c","modified":1681604859760,"created":1681357656741,"url":"localhost:3333/pacientes/16","name":"update pacientes","description":"Realiza a atualização do registro de um paciente. para realizar essa atualização é necessário o envio do token do paciente logado\n\nNo body devem ser passados os seguintes dados:\n\n- nome\n- email\n- idade\n\nTodos estes campos devem ser preenchidos, caso contrário será retornado o status 400.\n\nNo caso da requisição ser bem sucedida, retornará o status 200 com um json com os novos dados.\n\nPara fazer esta requisição é necessario o envio do token.\n\n- Caso o token fornecido seja invalido será retornado o status 401\n","method":"PUT","body":{"mimeType":"application/json","text":"\n\t{\n\t\t\"nome\":\"testando555\",\n\t\t\"email\":\"teste555@gmail.com\",\n\t\t\"idade\":\"01-02-1995\"\n\t}\n"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_60f71b2ad0124a9bb31545fe0d618a98"},{"id":"pair_1cc9ff9066b74bfebedafdb25b803ea2","name":"Authorization","value":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIsIm5vbWUiOiJ0ZXN0ZVNlbmhhIiwiZW1haWwiOiJ0ZXN0ZVNlbmhhQGdtYWlsLmNvbSIsImlhdCI6MTY4MTU3MDg2OH0.X2Pbb1dyfdJE7ByiyzgfiX_WNPWtdontG2GOSVLbyOQ","description":""}],"authentication":{},"metaSortKey":-1681442566093.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b5690993f77044bea7db8580cacd7291","parentId":"fld_323b4c8d015c483890ecc98a712e125c","modified":1681605007978,"created":1681571394586,"url":"localhost:3333/pacientes/15","name":"delete pacientes","description":"Deleta o registro do paciente com o id fornecido na requisição.\n\n- caso o id não seja encontrado a API retornará o status 404 e um json com a mensagem 'id não encontrado'.\n\n- Caso o id fornecido esteja correto, o registro é apagado do banco de dados e a API retornará o status 204.\n\nPara fazer esta requisição é necessario o envio do token.\n\n- Caso o token fornecido seja invalido será retornado o status 401","method":"DELETE","body":{},"parameters":[],"headers":[{"id":"pair_366964158dd24d7cae41665488564779","name":"Authorization","value":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIsIm5vbWUiOiJ0ZXN0YW5kbyBsaW1pdGHDp8OjbyIsImVtYWlsIjoidGVzdGVTZW5oYUBnbWFpbC5jb20iLCJpYXQiOjE2ODE1ODk0NDF9.rIUr42W36j4XWBix_ipmM_vhh_oOg40kq-QuA-UcOZw","description":""}],"authentication":{},"metaSortKey":-1681442566043.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9a197fd2e2d146e0be2d56099544c1ec","parentId":"fld_4523c6fedbe5495d9e637c77603b1a3d","modified":1681605066776,"created":1681428085666,"url":"localhost:3333/atendimentos","name":"listar atendimentos","description":"Lista todos os atendimentos cadastrados no banco de dados retornando o status 200.\ncaso não existam registros de atendimentos cadastrados é retornada uma Array vazia e também retorna o status 200.\n","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1681300997324.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_4523c6fedbe5495d9e637c77603b1a3d","parentId":"wrk_8f5be0557ae9439a81b882cd65837542","modified":1681585059780,"created":1681584159043,"name":"Atendimentos","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1681300997390.125,"_type":"request_group"},{"_id":"req_cad0283b411f4bd0b4e8664a9def9530","parentId":"fld_4523c6fedbe5495d9e637c77603b1a3d","modified":1681605096797,"created":1681571568432,"url":"localhost:3333/atendimentos/7","name":"listar atendimento especifico","description":"Retorna as informações do atendimento cujo id foi passado como parâmetro da URL.\n\n- caso o id fornecido seja valido a API vai retornar o status 200.\n- Caso o id do paciente não seja encontrado, a API retornará o status 404 e um json com a mensagem \"id não encontrado\".\n\nPara fazer esta requisição é necessario o envio do token.\n\n- Caso o token fornecido seja invalido será retornado o status 401","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_cc80cfa2deb24aa9930508ea05c6a451"},{"id":"pair_f2f0728a61a6461d80b1bf4fdf2289d0","name":"Authorization","value":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIsIm5vbWUiOiJ0ZXN0YW5kbyBsaW1pdGHDp8OjbyIsImVtYWlsIjoidGVzdGVTZW5oYUBnbWFpbC5jb20iLCJpYXQiOjE2ODE1ODk0NDF9.rIUr42W36j4XWBix_ipmM_vhh_oOg40kq-QuA-UcOZw","description":""}],"authentication":{},"metaSortKey":-1681300997274.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_170472301529466fbe46b6862efd3f8c","parentId":"fld_4523c6fedbe5495d9e637c77603b1a3d","modified":1681605180517,"created":1681425917027,"url":"localhost:3333/atendimentos","name":"create atendimentos","description":"Cria o registro de um atendimento, para criar este registro é preciso enviar um json com as seguintes informações no body:\n\n- paciente_id\n- data_atendimento \n- observacao\n\ncaso alguma informação não seja passada é retornado o status 400.\nNo caso de todas as informações serem passadas de forma correta é retornado o status 201 e um json com todos os dados que foram cadastrados.","method":"POST","body":{"mimeType":"application/json","text":"\n\t{\n\t\t\"paciente_id\": 16,\n\t\t\"data_atendimento\":\"2020-05-23T10:10:00Z\",\n\t\t\"observacao\":\"observaçao teste\"\n\t}\n"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_1d5e1bcaa2274accb97588dc20276e63"},{"id":"pair_8abdb31e829e45819e54ee562032cb13","name":"Authorization","value":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIsIm5vbWUiOiJ0ZXN0YW5kbyBsaW1pdGHDp8OjbyIsImVtYWlsIjoidGVzdGVTZW5oYUBnbWFpbC5jb20iLCJpYXQiOjE2ODE1ODk0NDF9.rIUr42W36j4XWBix_ipmM_vhh_oOg40kq-QuA-UcOZw","description":""}],"authentication":{},"metaSortKey":-1681300997224.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_c7aed9237519443ea9a541123d08a9fb","parentId":"fld_4523c6fedbe5495d9e637c77603b1a3d","modified":1681605234010,"created":1681300997462,"url":"localhost:3333/atendimentos/77","name":"delete atendimentos","description":"Deleta o registro do atendimento com o id fornecido na requisição.\n\n- caso o id não seja encontrado a API retornará o status 404 e um json com a mensagem 'id não encontrado'.\n\n- Caso o id fornecido esteja correto, o registro é apagado do banco de dados e a API retornará o status 204.\n\nPara fazer esta requisição é necessario o envio do token.\n\n- Caso o token fornecido seja invalido será retornado o status 401","method":"DELETE","body":{},"parameters":[],"headers":[{"id":"pair_5fe16b92989f4a4bac51e11bcd569639","name":"Authorization","value":" Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIsIm5vbWUiOiJ0ZXN0YW5kbyBsaW1pdGHDp8OjbyIsImVtYWlsIjoidGVzdGVTZW5oYUBnbWFpbC5jb20iLCJpYXQiOjE2ODE1ODk0NDF9.rIUr42W36j4XWBix_ipmM_vhh_oOg40kq-QuA-UcOZw","description":""}],"authentication":{},"metaSortKey":-1681300997174.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_d31948871732d54024865e7748529aaffddbec74","parentId":"wrk_8f5be0557ae9439a81b882cd65837542","modified":1681591781035,"created":1681300997428,"name":"Base Environment","data":{},"dataPropertyOrder":{},"color":null,"isPrivate":false,"metaSortKey":1681300997428,"_type":"environment"},{"_id":"jar_d31948871732d54024865e7748529aaffddbec74","parentId":"wrk_8f5be0557ae9439a81b882cd65837542","modified":1681300997439,"created":1681300997439,"name":"Default Jar","cookies":[],"_type":"cookie_jar"},{"_id":"spc_c0c13afd20824711b9dbd53c9ec88635","parentId":"wrk_8f5be0557ae9439a81b882cd65837542","modified":1681601804083,"created":1681592182421,"fileName":"New Document","contents":"openapi: 3.0.0\ninfo:\n  description: \"This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\n    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key\n    `special-key` to test the authorization filters.\"\n  version: 1.0.2\n  title: Swagger Petstore\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"405\":\n          description: Invalid input\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid status value\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid tag value\n      deprecated: true\n  \"/pet/{petId}\":\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        \"405\":\n          description: Invalid input\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: \"\"\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: \"\"\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid Order\n  \"/store/order/{orderId}\":\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value >= 1 and <= 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 10\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value. Negative\n        or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: \"\"\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  \"/user/{username}\":\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: \"\"\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: \"The name that needs to be fetched. Use user1 for testing. \"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Updated user object\n        required: true\n      responses:\n        \"400\":\n          description: Invalid user supplied\n        \"404\":\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore.swagger.io/v2\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/User\"\n      description: List of user object\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n      description: Pet object that needs to be added to the store\n      required: true\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \"#/components/schemas/Category\"\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string","contentType":"yaml","_type":"api_spec"},{"_id":"uts_77a3b13c31df4380b1e88cda63f0bc40","parentId":"wrk_8f5be0557ae9439a81b882cd65837542","modified":1681300997468,"created":1681300997468,"name":"Example Test Suite","_type":"unit_test_suite"},{"_id":"env_6668468627f643aaa98a5ed5b104c2e4","parentId":"env_d31948871732d54024865e7748529aaffddbec74","modified":1681591783683,"created":1681591783683,"name":"New Environment","data":{},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1681591783683,"_type":"environment"}]}